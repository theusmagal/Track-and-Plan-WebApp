
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

// connection to db postgresql in Railway
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // get the DB url in .env
}

// for users
model User {
  id        Int      @id @default(autoincrement()) // Primary key
  email     String   @unique                       // User email must be unique
  password  String                                 // Hashed password
  name      String?                                // Optional display name
  createdAt DateTime @default(now())               // Timestamp when the user was created

  boards    Board[]                                // One-to-many relationship: user can have many boards
}

// for each board
model Board {
  id        Int      @id @default(autoincrement()) // Primary key
  title     String                                 // Board title
  userId    Int                                    // Foreign key to User
  user      User     @relation(fields: [userId], references: [id]) // Relation to User
  columns   Column[]                               // One-to-many relationship: board has columns
  createdAt DateTime @default(now())               // Timestamp when the board was created
}


// for each column inside boards 
model Column {
  id        Int      @id @default(autoincrement()) // Primary key
  title     String                                 // Column title
  boardId   Int                                    // Foreign key to Board
  board     Board    @relation(fields: [boardId], references: [id]) // Relation to Board
  order     Int                                    // Order for drag-and-drop reordering
  createdAt DateTime @default(now())               // Timestamp when the column was created

  cards     Card[]                                 // One-to-many relationship: column has cards
}


// for cards in columns
model Card {
  id        Int       @id @default(autoincrement()) // Primary key
  title     String                                  // Card title
  columnId  Int                                     // Foreign key to Column
  column    Column    @relation(fields: [columnId], references: [id], onDelete: Cascade) // Cascade delete
  order     Int                                     // Order within the column
  color     String?                                 // Optional card color
  createdAt DateTime  @default(now())               // Creation timestamp
  updatedAt DateTime  @updatedAt                    // Auto-updated timestamp when modified
  comments  Comment[]                               // One-to-many: card can have many comments
}

// comments in cards
model Comment {
  id        Int      @id @default(autoincrement()) // Primary key
  text      String                                 // Comment text
  createdAt DateTime @default(now())               // Creation timestamp
  updatedAt DateTime @updatedAt                    // Auto-update on edit
  cardId    Int                                    // Foreign key to Card
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade) // Cascade on delete
}
